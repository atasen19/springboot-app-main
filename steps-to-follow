STEPS TO FOLLOW

1- Create an Ubuntu AMI EC2 machine to host Jenkins, assign it a public IP and connect login to EC2 Jenkins machine from terminal with this command:
	- ssh -i "VitcaseJenkins.pem" ubuntu@3.78.238.23 (Here and in some next steps, this kind of ip, region etc information is subject to change, user yours.)
2- Run the following commands to install Jenkins, Java, JDK, and Maven
	- sudo hostnamectl set-hostname Jenkins
	- sudo apt update
	- sudo apt install default-jdk -y
	- java -version
	- sudo apt install maven -y
	- mvn -version
	- curl -fsSL https://pkg.jenkins.io/debian/jenkins.io-2023.key | sudo tee \ /usr/share/keyrings/jenkins-keyring.asc > /dev/null
	- echo deb [signed-by=/usr/share/keyrings/jenkins-keyring.asc] \
https://pkg.jenkins.io/debian binary/ | sudo tee \ /etc/apt/sources.list.d jenkins.list > /dev/null
	- sudo apt update
	- sudo apt install jenkins -y
	- Go to the this address on a browser:
		http://ec2-3-78-238-23.eu-central-1.compute.amazonaws.com:8080  
	- login with admin password in /var/lib/jenkins/secrets/initialAdminPassword (catch it after next step with this command: cat /var/lib/jenkins/secrets/initialAdminPassword)
	- login to EC2 Jenkins machine from terminal with this command:
		ssh -i "VitcaseJenkins.pem" ubuntu@3.78.238.23

3- Create an ECR repo in AWS

4- Go to the local linux terminal which is already logged in to EC2 Jenkins machine.

4.1- Install AWS CLI – Command line tools for working with AWS services, including Amazon EKS.

Run the following commands consequently after previous one completed successfully:
	- curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip" 
	- sudo apt install unzip
	- sudo unzip awscliv2.zip  
	- sudo ./aws/install
	- aws --version


4.2- Install eksctl – A command line tool for working with EKS clusters that automates many individual tasks.

Download and extract the latest release of eksctl with the following command:
	- curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp

Move the extracted binary to /usr/local/bin. 
	- sudo mv /tmp/eksctl /usr/local/bin
	- eksctl version

4.3- Install kubectl  – A command line tool for working with Kubernetes clusters. 

Download keys from google website
	- curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -

Create the below file
	- sudo touch /etc/apt/sources.list.d/kubernetes.list
	- echo "deb http://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee -a /etc/apt/sources.list.d/kubernetes.list

Update package manager
	- sudo apt-get update

Install
	- sudo apt-get install -y kubectl

Verify if kubectl got installed
	- kubectl version --short --client
	
5- Create an IAM role on AWS which has administrator access policy and attach this role to our Jenkins EC2 instance to make things with EKS cluster.

5.1- Go to the instance and click on modify IAM Role under Actions with the role created in previous step.

6- Now go the linux terminal in your local machine that connected to Jenkins EC2 machine

6.1- Switch to Jenkins user
	- sudo su - jenkins

Create EKS Cluster with two worker nodes using eksctl
	- eksctl create cluster --name demo-eks --region eu-central-1 --nodegroup-name my-nodes --node-type t3.small --managed --nodes 2

View the kubeconfig file by entering the below command:
	- cat  /var/lib/jenkins/.kube/config


7- Jenkins Plugin Installations
7.1- Open a new terminal in your local machine and login Jenkins EC2 machine again.
	- ssh -i "VitcaseJenkins.pem" ubuntu@ec2-3-78-238-23.eu-central-1.compute.amazonaws.com
	
7.2- Install Docker on Jenkins EC2 Instance
	- sudo apt-get update
	- sudo apt install gnupg2 pass -y
	- sudo apt install docker.io -y
	- Add Ubuntu user to Docker group: sudo usermod -aG docker $USER
	- exit from session and come back to see changes
		- exit
		- ssh -i "VitcaseJenkins.pem" ubuntu@ec2-3-78-238-23.eu-central-1.compute.amazonaws.com
	- sudo systemctl start docker
	- sudo systemctl enable docker
	- sudo systemctl status docker (you should see active (running))
	- Add jenkins user to Docker group
		- sudo usermod -a -G docker jenkins
	- Restart Jenkins service
		- sudo service jenkins restart
	- Reload system daemon files
		- sudo systemctl daemon-reload
	- Restart Docker service as well
		- sudo service docker stop
		- sudo service docker start

7.3- Install Necessary Plugins for Jenkins
	- Relogin since we restarted in previous step
	- Go to Manage Jenkins --> Plugins --> Available Plugins
	- Select Docker, Docker Pipeline, Kubernetes CLI and install without restart.
	

7.4- Go to Global Tool Configuration on Jenkins for Maven settings.
	- Click on Tools
	- Scroll down and click on Add Maven
	- Unclick install automatically
	- past this path: /usr/share/maven
	- Click on Apply and Save

7.5- Create Kubernetes Pipeline
	- Go to Jenkins interface 
	- Give a name for pipiline such as myKubernetesPipelineJob, select Pipeline and click on OK
	- CLick on Pipeline tab.
	- Click on Pipeline Syntax just above Save and Apply button.
	- Choose checkout: Checkout from version control from Sample Step dropdown list.
	- Copy the Github repo link and paste it to Repository URL field.
	- Click on Generate Pipeline Script, copy the script (in my case: checkout scmGit(branches: [[name: '*/master']], extensions: [], userRemoteConfigs: [[url: 'https://github.com/atasen19/spring-boot']]))
	- Paste this script as a step in the Checkout stage in our pipeline. To generate this pipeline you can select Hello World template and replace the stage name with "Checkout" and put the script in the step.
	- Click on Apply and Save buttons consecutively. 
	- Click on Build Now button and see the SUCCESS message in Console Output in left side. (We are going well. We will improve the pipeline in next steps.)
	- We have to build the JAR file. Add a new stage and inside it add a step with "sh 'mvn clean install' command.
	- Appy and Save. Build Now again to see if everything is OK. You have to see SUCCESS message at the end of the Console Output.
	- We have to build a Docker image from this JAR file and to do this we have to declare a Docker registery in our pipeline.
	- Create an Environment for registry. Copy the ECR URI to use it here for registry value. (in my case: public.ecr.aws/o1u0t4s1/vitcase-ecr)
	- Create a new stage for building image. Write the script (in my case: docker.build registry)
	- Click on Apply and Save and Build Now again to see if everything is OK. You have to see SUCCESS message at the end of the Console Output.
	- See docker images in linux terminal which has already logged into Jenkins EC2 instance. (with "docker images" command)
	- We have to push the Docker image, to do this create a new stage and step in it. You can see the commands below after clicking on "view push commands" button in vitcase AWS ECR Repository and copy them from there easily. 
		- sh 'aws ecr-public get-login-password --region eu-central-1 | docker login --username AWS --password-stdin public.ecr.aws/o1u0t4s1'
                - sh 'docker push public.ecr.aws/o1u0t4s1/vitcase-ecr:latest'
                - Click on Apply and Save, click on Build Now to see if everything is OK. You have to see SUCCESS message at the end of the Console Output.
                - Go to ECR in AWS Console see the image that pushed in previous step.
                	
7.6- Create Credentials for connecting to Kubernetes Cluster using kubeconfig
	- Get cluster to see if it is up and running:
		eksctl get cluster --name demo-eks --region eu-central-1
	- Update Kube config by entering below command:
		aws eks update-kubeconfig --name demo-eks --region eu-central-1
	- Get nodes
		kubectl get nodes (You have to see 2 worker nodes)
	- Get kube config for jenkins wit following command and copy and past it to a text file and save it locally.
		cat /var/lib/jenkins/.kube/config
	- Go to Jenkins, Click on Manage Jenkins --> Manage Credentials --> Add Credentials
		Choose "Secret file" as credential kind.
		Upload the file saved in previous step.
		Give 'K8S' as ID and Description
	- Go to Pipeline Syntax --> Snippet Generator --> Select "withKubeConfig: Configure Kubernetes CLI (kubectl). Select "Kubeconfig-Vitcase (K8S)" under Credentials. Click on "Generate Pipeline Script" at the bottom. Copy the script. We will use it in our new stage.
	- Create a new stage in Pipeline, past the script into "script" block under steps. 
	- Add this script in the script in previous step: sh ('kubectl apply -f eks-deploy-k8s.yaml') 
	- Apply + Save + Build Now. You have to see SUCCESS message at the end of the Console Output.
	- Run "kubectl get svc" in local linux terminal which is already connected to Jenkins EC2 instance to see external IP of olur deployed app. Copy the external IP. (in my case: addd21d3ccc1c404aab31023f1c82732-1454295267.eu-central-1.elb.amazonaws.com)
	- sudo su - jenkins
	- kubectl get deployment
	- kubectl get nodes
